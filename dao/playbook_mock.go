// Code generated by MockGen. DO NOT EDIT.
// Source: dao/playbook.go

// Package dao is a generated GoMock package.
package dao

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPlaybookRepository is a mock of PlaybookRepository interface
type MockPlaybookRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPlaybookRepositoryMockRecorder
}

// MockPlaybookRepositoryMockRecorder is the mock recorder for MockPlaybookRepository
type MockPlaybookRepositoryMockRecorder struct {
	mock *MockPlaybookRepository
}

// NewMockPlaybookRepository creates a new mock instance
func NewMockPlaybookRepository(ctrl *gomock.Controller) *MockPlaybookRepository {
	mock := &MockPlaybookRepository{ctrl: ctrl}
	mock.recorder = &MockPlaybookRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPlaybookRepository) EXPECT() *MockPlaybookRepositoryMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockPlaybookRepository) Insert(playbook *Playbook) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", playbook)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert
func (mr *MockPlaybookRepositoryMockRecorder) Insert(playbook interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockPlaybookRepository)(nil).Insert), playbook)
}

// Update mocks base method
func (m *MockPlaybookRepository) Update(id int64, playbook *Playbook) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, playbook)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockPlaybookRepositoryMockRecorder) Update(id, playbook interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPlaybookRepository)(nil).Update), id, playbook)
}

// UpdatePlaybookFileID mocks base method
func (m *MockPlaybookRepository) UpdatePlaybookFileID(id, playbookFileID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlaybookFileID", id, playbookFileID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePlaybookFileID indicates an expected call of UpdatePlaybookFileID
func (mr *MockPlaybookRepositoryMockRecorder) UpdatePlaybookFileID(id, playbookFileID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlaybookFileID", reflect.TypeOf((*MockPlaybookRepository)(nil).UpdatePlaybookFileID), id, playbookFileID)
}

// FindAll mocks base method
func (m *MockPlaybookRepository) FindAll(where string, offset, limit int) ([]Playbook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", where, offset, limit)
	ret0, _ := ret[0].([]Playbook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockPlaybookRepositoryMockRecorder) FindAll(where, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockPlaybookRepository)(nil).FindAll), where, offset, limit)
}

// FindOne mocks base method
func (m *MockPlaybookRepository) FindOne(id int64) (Playbook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", id)
	ret0, _ := ret[0].(Playbook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne
func (mr *MockPlaybookRepositoryMockRecorder) FindOne(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockPlaybookRepository)(nil).FindOne), id)
}

// FindCount mocks base method
func (m *MockPlaybookRepository) FindCount(where string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCount", where)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCount indicates an expected call of FindCount
func (mr *MockPlaybookRepositoryMockRecorder) FindCount(where interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCount", reflect.TypeOf((*MockPlaybookRepository)(nil).FindCount), where)
}

// FindPlaybookByIDs mocks base method
func (m *MockPlaybookRepository) FindPlaybookByIDs(str string, strIDs []interface{}) ([]Playbook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPlaybookByIDs", str, strIDs)
	ret0, _ := ret[0].([]Playbook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPlaybookByIDs indicates an expected call of FindPlaybookByIDs
func (mr *MockPlaybookRepositoryMockRecorder) FindPlaybookByIDs(str, strIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPlaybookByIDs", reflect.TypeOf((*MockPlaybookRepository)(nil).FindPlaybookByIDs), str, strIDs)
}
